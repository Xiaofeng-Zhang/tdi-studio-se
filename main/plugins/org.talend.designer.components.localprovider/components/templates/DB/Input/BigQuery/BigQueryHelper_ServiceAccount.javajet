<%@jet
%>
class BigQueryHelper_<%=cid%> {
			
	private final java.time.format.DateTimeFormatter timeParserFormat = java.time.format.DateTimeFormatter.ofPattern("[H][HH]:[m][mm]:[s][ss][.SSSSSS][.SSSSS][.SSSS][.SSS][.SS][.S][X][Z][VV][z]");
			
	private final java.time.format.DateTimeFormatter timeDateParserFormat = java.time.format.DateTimeFormatter.ofPattern("yyyy-[M][MM]-[d][dd][ ]['T']HH:[m][mm]:[s][ss][.SSSSSS][.SSSSS][.SSSS][.SSS][.SS][.S][X][Z][VV][z]");
			
	private final java.time.format.DateTimeFormatter dateParserFormat = java.time.format.DateTimeFormatter.ofPattern("yyyy-[M][MM]-[d][dd]");

	public void readColumnsFromBigQuery(Dynamic column, com.google.cloud.bigquery.FieldValueList rs, int fixedColumnCount, boolean trim) throws Exception {
		column.clearColumnValues();
		for (int i = 0; i < column.getColumnCount(); i++) {
			DynamicMetadata dcm = column.getColumnMetadata(i);
			int colNum = fixedColumnCount + i;
			if (rs.get(colNum).getValue() == null) {
				column.addColumnValue(null);
				continue;
			}
			if ("id_List".equals(dcm.getType())) {
				java.util.List<com.google.cloud.bigquery.FieldValue> bigQueryValues = rs.get(colNum).getRepeatedValue();
				java.util.List<Object> values = bigQueryValues.stream()
				                                              .map(com.google.cloud.bigquery.FieldValue::getValue)
				                                              .collect(java.util.stream.Collectors.toList());
				column.addColumnValue(values);
			}
			else if ("id_String".equals(dcm.getType())) {
				String value;
				if("STRING".equalsIgnoreCase(dcm.getDbType())) {
					value = rs.get(colNum).getStringValue();
				} else {
					value = String.valueOf(rs.get(colNum).getValue());
				}
				column.addColumnValue((trim && (value!=null)) ? value.trim() : value);
			} else if ("id_Date".equals(dcm.getType())) {
				if("TIMESTAMP".equals(dcm.getDbType())) {
					column.addColumnValue(new Date(ParserUtils.parseTo_Double(rs.get(colNum).getStringValue()).longValue() * 1000));
				} else if("TIME".equalsIgnoreCase(dcm.getDbType())) {
					java.time.LocalTime ta = timeParserFormat.parse(rs.get(colNum).getStringValue(), java.time.LocalTime::from);
					column.addColumnValue(Date.from(ta.atDate(java.time.LocalDate.of(1970, 1, 1)).
							atZone(java.time.ZoneId.systemDefault()).toInstant()));
				} else if("DATETIME".equalsIgnoreCase(dcm.getDbType())) {
					java.time.LocalDateTime ta = timeDateParserFormat.parse(rs.get(colNum).getStringValue(), java.time.LocalDateTime::from);
					column.addColumnValue(Date.from(ta.atZone(java.time.ZoneId.systemDefault()).toInstant()));
				} else if("DATE".equalsIgnoreCase(dcm.getDbType())) {
					java.time.LocalDate ta = dateParserFormat.parse(rs.get(colNum).getStringValue(), java.time.LocalDate::from);
					column.addColumnValue(Date.from(ta.atStartOfDay(java.time.ZoneId.systemDefault()).toInstant()));
				}
			} else if ("id_Integer".equals(dcm.getType()) || "id_Long".equals(dcm.getType()) || "id_Double".equals(dcm.getType())
					|| "id_Byte".equals(dcm.getType()) || "id_byte[]".equals(dcm.getType()) || "id_BigDecimal".equals(dcm.getType())) {
				if (rs.get(colNum).getValue() == null) {
					column.addColumnValue(null);
					continue;
				}
				if ("id_Integer".equals(dcm.getType())) {
					column.addColumnValue(rs.get(colNum).getNumericValue().intValue());
				} else if ("id_Long".equals(dcm.getType())) {
					column.addColumnValue(rs.get(colNum).getLongValue());
				} else if ("id_Double".equals(dcm.getType())) {
					column.addColumnValue(rs.get(colNum).getDoubleValue());
				} else if ("id_Byte".equals(dcm.getType())) {
					column.addColumnValue(rs.get(colNum).getNumericValue().byteValue());
				} else if ("id_byte[]".equals(dcm.getType())) {
					column.addColumnValue(rs.get(colNum).getValue().toString().getBytes(<%=encoding %>));
				} else if ("id_BigDecimal".equals(dcm.getType())) {
					column.addColumnValue(rs.get(colNum).getNumericValue());
				}
			}else  if ("id_Boolean".equals(dcm.getType())) {
				if (rs.get(colNum).getValue() == null) {
					column.addColumnValue(null);
				}else{
					column.addColumnValue(rs.get(colNum).getBooleanValue());
				}
			} else {
				column.addColumnValue(rs.get(colNum).getValue());
			}
		}
	}
}