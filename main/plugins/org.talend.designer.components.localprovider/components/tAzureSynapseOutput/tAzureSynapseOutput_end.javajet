<%@ jet
imports="
	org.talend.designer.codegen.config.CodeGeneratorArgument
	org.talend.core.model.process.INode
	org.talend.core.model.process.ElementParameterParser
	org.talend.core.model.metadata.IMetadataTable
	org.talend.core.model.metadata.types.JavaTypesManager
    org.talend.core.model.metadata.MappingTypeRetriever
    org.talend.core.model.metadata.MetadataTalendType
	org.talend.core.model.process.IConnection
	java.util.List
	java.util.ArrayList
	java.util.Map
	java.util.HashMap
"
skeleton="../templates/db_output_bulk.skeleton"
%>
<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/DBLogUtil.javajet"%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();

	String cid = node.getUniqueName();
	dbLog = new DBLogUtil(node);
	final String dbmsId = ElementParameterParser.getValue(node,"__MAPPING__");

	List<Map<String, String>> addCols =
        (List<Map<String,String>>)ElementParameterParser.getObjectValue(node,"__ADD_COLS__");


	String dataAction = ElementParameterParser.getValue(node,"__DATA_ACTION__");

	String commitEvery = ElementParameterParser.getValue(node, "__COMMIT_EVERY__");

	String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");

    boolean  identityInsert= "true".equals(ElementParameterParser.getValue(node, "__IDENTITY_INSERT__"));

    boolean useExistingConnection = "true".equals(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));

    boolean ignoreDateOutofRange = ("true").equals(ElementParameterParser.getValue(node,"__IGNORE_DATE_OUTOF_RANGE__"));
    boolean useFieldOptions = ("true").equals(ElementParameterParser.getValue(node, "__USE_FIELD_OPTIONS__"));
    List<Map<String, String>> fieldOptions = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FIELD_OPTIONS__");

    String tableName = ElementParameterParser.getValue(node,"__TABLE__");
	String incomingConnName = null;
	boolean usingStatsLogs=cid.equals("talendLogs_DB") || cid.equals("talendStats_DB") || cid.equals("talendMeter_DB");
    List<IMetadataColumn> columnList = getColumnList(node);

    List< ? extends IConnection> conns = node.getIncomingConnections();
    if(conns!=null && conns.size()>0){
        IConnection conn = conns.get(0);
        incomingConnName = conn.getName();
    }

    boolean isDynamic = false;
    List<IMetadataTable> metadatas = node.getMetadataList();
    if ((metadatas!=null)&&(metadatas.size()>0)) {
        IMetadataTable metadata = metadatas.get(0);
		isDynamic = metadata.isDynamicSchema();
    }

    List<Column> stmtStructure =  getManager(dbmsId, cid).createColumnList(columnList, useFieldOptions, fieldOptions, addCols);
    isDynamic = isDynamic && !getManager(dbmsId, cid).isDynamicColumnReplaced();

    String dieOnError = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
    boolean useBatchSize = "true".equals(ElementParameterParser.getValue(node, "__USE_BATCH_SIZE__"));

    String rejectConnName = null;
    List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
    if(rejectConns != null && rejectConns.size() > 0) {
        IConnection rejectConn = rejectConns.get(0);
        rejectConnName = rejectConn.getName();
    }

    boolean useBatch = useBatchSize && (rejectConnName == null)
                     && (
                          ("INSERT").equals(dataAction) || ("UPDATE").equals(dataAction) || ("DELETE").equals(dataAction)
                        );

    String tableAction = ElementParameterParser.getValue(node,"__TABLE_ACTION__");
    boolean isUseParallelize ="true".equalsIgnoreCase(ElementParameterParser.getValue(node, "__PARALLELIZE__"));
	boolean  isSpecifyIdentityKey = "true".equals(ElementParameterParser.getValue(node, "__SPECIFY_IDENTITY_FIELD__"));
	if(isDynamic || isUseParallelize || identityInsert || (!"DROP_CREATE".equals(tableAction) && !"CREATE".equals(tableAction) && !"DROP_IF_EXISTS_AND_CREATE".equals(tableAction))){
		isSpecifyIdentityKey = false;
	}
    String identityKey = ElementParameterParser.getValue(node, "__IDENTITY_FIELD__");
	if(identityInsert && useExistingConnection ) {
        %>
		if ( isShareIdentity_<%=cid%> ) {
			String setIdentityInsertONSQL_<%=cid%> = "SET IDENTITY_INSERT ["+ tableName_<%=cid%> +"] ON";
			<%dbLog.data().sqlExecuteTry(dbLog.var("setIdentityInsertONSQL"));%>
        	stmt_<%=cid %>.execute(setIdentityInsertONSQL_<%=cid%>);
			<%dbLog.data().sqlExecuteDone(dbLog.var("setIdentityInsertONSQL"));%>
        }
        <%
    }
    if(("INSERT_OR_UPDATE").equals(dataAction)) {
%>
        if(pstmtUpdate_<%=cid%> != null){
            pstmtUpdate_<%=cid %>.close();
            resourceMap.remove("pstmtUpdate_<%=cid %>");
        }
        if(pstmtInsert_<%=cid %> != null){
            pstmtInsert_<%=cid %>.close();
            resourceMap.remove("pstmtInsert_<%=cid %>");
        }
        if(pstmt_<%=cid %> != null) {
            pstmt_<%=cid %>.close();
            resourceMap.remove("pstmt_<%=cid %>");
        }
<%
    } else if(("UPDATE_OR_INSERT").equals(dataAction)) {
%>
        if(pstmtUpdate_<%=cid%> != null){
            pstmtUpdate_<%=cid %>.close();
            resourceMap.remove("pstmtUpdate_<%=cid %>");
        }
        if(pstmtInsert_<%=cid %> != null){
            pstmtInsert_<%=cid %>.close();
            resourceMap.remove("pstmtInsert_<%=cid %>");
        }
<%
    } else if (("INSERT_IF_NOT_EXIST").equals(dataAction)) {
    %>
        if(pstmtInsert_<%=cid %> != null){
            pstmtInsert_<%=cid %>.close();
            resourceMap.remove("pstmtInsert_<%=cid %>");
        }
        if(pstmt_<%=cid %> != null) {
            pstmt_<%=cid %>.close();
            resourceMap.remove("pstmt_<%=cid %>");
        }
    <%
    } else {
   %>
          <%
          if (useBatch) {
                %>
                try {
						int countSum_<%=cid%> = 0;
						if (pstmt_<%=cid %> != null && batchSizeCounter_<%=cid%> > 0) {
							<%dbLog.batch().executeTry(dbLog.str(dataAction));%>
							for(int countEach_<%=cid%>: pstmt_<%=cid %>.executeBatch()) {
								if(countEach_<%=cid%> == -2 || countEach_<%=cid%> == -3) {
									break;
								}
								countSum_<%=cid%> += countEach_<%=cid%>;
							}
							<%dbLog.batch().executeDone(dbLog.str(dataAction));%>
						}
            	    	<%if (("INSERT").equals(dataAction)) {
            	    	%>
            	    		insertedCount_<%=cid%> += countSum_<%=cid%>;
            	    	<%
            	    	}else if (("UPDATE").equals(dataAction)) {
            	    	%>
            	    		updatedCount_<%=cid%> += countSum_<%=cid%>;
            	    	<%
            	    	}else if (("DELETE").equals(dataAction)) {
            	    	%>
            	    	    deletedCount_<%=cid%> += countSum_<%=cid%>;
            	    	<%
            	    	}%>
                }catch (java.sql.BatchUpdateException e){
                	<%if(("true").equals(dieOnError)) {
                	%>
                		throw(e);
                	<%
                	}else {
                	%>
                	int countSum_<%=cid%> = 0;
					for(int countEach_<%=cid%>: e.getUpdateCounts()) {
						countSum_<%=cid%> += (countEach_<%=cid%> < 0 ? 0 : countEach_<%=cid%>);
					}
					<%if (("INSERT").equals(dataAction)) {
            	    	%>
            	    		insertedCount_<%=cid%> += countSum_<%=cid%>;
            	    	<%
            	    	}else if (("UPDATE").equals(dataAction)) {
            	    	%>
            	    		updatedCount_<%=cid%> += countSum_<%=cid%>;
            	    	<%
            	    	}else if (("DELETE").equals(dataAction)) {
            	    	%>
            	    	    deletedCount_<%=cid%> += countSum_<%=cid%>;
            	    	<%
            	    	}
            	    	dbLog.logPrintedException("e.getMessage()");
            	    	%>
                		System.err.println(e.getMessage());
                	<%
                	}%>
            	}
                <%
                }%>
        if(pstmt_<%=cid %> != null) {
			<%
			//to fixed: bug8422
			if(!(cid.equals("talendLogs_DB") || cid.equals("talendStats_DB") || cid.equals("talendMeter_DB"))){
			%>
				pstmt_<%=cid %>.close();
				resourceMap.remove("pstmt_<%=cid %>");
			<%
			}else{
			%>
				SharedDBPreparedStatement.releasePreparedStatement(keyPsmt_<%=cid%>);
			<%
			}
			%>
        }
        <%
    }

if(identityInsert){
%>
    String setIdentityInsertOFFSQL_<%=cid%> = "SET IDENTITY_INSERT ["+ tableName_<%=cid%> +"] OFF";
    <%dbLog.data().sqlExecuteTry(dbLog.var("setIdentityInsertOFFSQL"));%>
    stmt_<%=cid %>.execute(setIdentityInsertOFFSQL_<%=cid%>);
    <%dbLog.data().sqlExecuteDone(dbLog.var("setIdentityInsertOFFSQL"));%>
    stmt_<%=cid %>.close();
<%
}
%>
    resourceMap.put("statementClosed_<%=cid%>", true);
    <%
    if(!("true").equals(useExistingConn))
    {
        if(!("").equals(commitEvery) && !("0").equals(commitEvery))
        {
            %>
            <%dbLog.commit().commitTry(null, dbLog.var("commitCounter"));%>
            conn_<%=cid%>.commit();
			<%dbLog.commit().commitDone(null);%>
            <%
        }

        commitEvery = "0";
        %>
        <%dbLog.conn().closeTry(null);%>
        conn_<%=cid%> .close();
        <%dbLog.conn().closeDone(null);%>
        resourceMap.put("finish_<%=cid%>", true);
        <%
    }
    %>

<%@ include file="../templates/DB/Output/DBOutputEndGlobalVars.javajet"%>
